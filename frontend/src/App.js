import React, { useEffect, useState } from 'react';
import { Amplify, API, Auth } from 'aws-amplify';

/*
 * Configure Amplify here.  At runtime the values for region, user pool and
 * API endpoint will be injected via environment variables (for example using
 * the `aws-exports.js` file generated by `amplify init` or via a config
 * fetched from S3).  The example below uses placeholders.
 *
 * In some bundlers (e.g. Vite or plain webpack) the global `process` object
 * may be undefined.  To avoid a `ReferenceError` we fall back to an empty
 * object when `process` is not available.  This allows the application to
 * start even if no environment variables are injected.
 */
const env = typeof process !== 'undefined' && process.env ? process.env : {};

Amplify.configure({
  Auth: {
    region: env.REACT_APP_REGION || 'us-east-1',
    userPoolId: env.REACT_APP_USER_POOL_ID || '',
    userPoolWebClientId: env.REACT_APP_USER_POOL_CLIENT || '',
  },
  API: {
    endpoints: [
      {
        name: 'EducationApi',
        // The default API URL points at the local backend on port 3001.
        // If REACT_APP_API_URL is defined in the environment (e.g. via
        // docker-compose), it will override this value.  Without an
        // override, the front‑end will attempt to call port 3001 on
        // localhost.
        endpoint: env.REACT_APP_API_URL || 'http://127.0.0.1:3001',
        region: env.REACT_APP_REGION || 'us-east-1',
      },
    ],
  },
});

export default function App() {
  const [lessons, setLessons] = useState(null);
  const [loading, setLoading] = useState(false);

  // Example: fetch today’s lessons when the component mounts
  useEffect(() => {
    const fetchLessons = async () => {
      setLoading(true);
      try {
        const res = await API.get('EducationApi', '/lessons', {});
        setLessons(res);
      } catch (err) {
        console.error('Failed to fetch lessons', err);
      } finally {
        setLoading(false);
      }
    };
    fetchLessons();
  }, []);

  const renderLessons = () => {
    if (!lessons) return null;
    // The API returns { date, grade, lessons: { Math: {...}, Reading: {...}, ... } }
    const subjects = Object.keys(lessons.lessons || {});
    return subjects.map((subject) => {
      const item = lessons.lessons[subject];
      if (!item) return null;
      return (
        <div key={item.id} style={{ marginBottom: '1.5rem' }}>
          <h3>{subject}: {item.title}</h3>
          {item.passage && <p><em>{item.passage}</em></p>}
          <p><strong>Question:</strong> {item.question}</p>
          <ul>
            {item.choices && item.choices.map((choice) => (
              <li key={choice}>{choice}</li>
            ))}
          </ul>
        </div>
      );
    });
  };

  return (
    <main style={{ padding: '2rem', fontFamily: 'sans-serif' }}>
      <h1>Education Platform</h1>
      {loading && <p>Loading today’s lesson…</p>}
      {lessons && (
        <div>
          <p>Date: {lessons.date}</p>
          <p>Grade: {lessons.grade}</p>
          {renderLessons()}
        </div>
      )}
    </main>
  );
}
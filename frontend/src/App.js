import React, { useEffect, useState } from 'react';
import { Amplify, API, Auth } from 'aws-amplify';

/*
 * Configure Amplify here.  At runtime the values for region, user pool and
 * API endpoint will be injected via environment variables (for example using
 * the `aws-exports.js` file generated by `amplify init` or via a config
 * fetched from S3).  The example below uses placeholders.
 *
 * In some bundlers (e.g. Vite or plain webpack) the global `process` object
 * may be undefined.  To avoid a `ReferenceError` we fall back to an empty
 * object when `process` is not available.  This allows the application to
 * start even if no environment variables are injected.
 */
// Environment variables injected at build time via webpack.DefinePlugin.  In
// the browser, the real `process` object is undefined; however, the
// DefinePlugin replaces references like `process.env.REACT_APP_API_URL` with
// their literal values.  We fall back to sensible defaults if a
// variable is undefined.

const API_URL = (typeof process !== 'undefined' && process.env && process.env.REACT_APP_API_URL) || 'http://127.0.0.1:3001';
const REGION = (typeof process !== 'undefined' && process.env && process.env.REACT_APP_REGION) || 'us-east-1';
const USER_POOL_ID = (typeof process !== 'undefined' && process.env && process.env.REACT_APP_USER_POOL_ID) || '';
const USER_POOL_CLIENT = (typeof process !== 'undefined' && process.env && process.env.REACT_APP_USER_POOL_CLIENT) || '';
const SKIP_LOGIN_FLAG = (typeof process !== 'undefined' && process.env && process.env.REACT_APP_SKIP_LOGIN) || 'false';

Amplify.configure({
  Auth: {
    region: REGION,
    userPoolId: USER_POOL_ID,
    userPoolWebClientId: USER_POOL_CLIENT,
  },
  API: {
    endpoints: [
      {
        name: 'EducationApi',
        endpoint: API_URL,
        region: REGION,
      },
    ],
  },
});

function LoginForm({ onLogin }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    try {
      await Auth.signIn(username, password);
      onLogin();
    } catch (err) {
      console.error('Login failed', err);
      setError('Login failed. Please check your credentials.');
    }
  };

  return (
    <div style={{ maxWidth: '400px', margin: '2rem auto', padding: '2rem', border: '1px solid #ccc', borderRadius: '8px' }}>
      <h2 style={{ textAlign: 'center' }}>Welcome</h2>
      <p style={{ textAlign: 'center' }}>Sign in to continue</p>
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <form onSubmit={handleSubmit}>
        <div style={{ marginBottom: '1rem' }}>
          <label htmlFor="username" style={{ display: 'block', marginBottom: '0.5rem' }}>Username</label>
          <input id="username" type="text" value={username} onChange={(e) => setUsername(e.target.value)} style={{ width: '100%', padding: '0.5rem' }} />
        </div>
        <div style={{ marginBottom: '1rem' }}>
          <label htmlFor="password" style={{ display: 'block', marginBottom: '0.5rem' }}>Password</label>
          <input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} style={{ width: '100%', padding: '0.5rem' }} />
        </div>
        <button type="submit" style={{ width: '100%', padding: '0.75rem', backgroundColor: '#0070f3', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>Sign In</button>
      </form>
    </div>
  );
}

function GradeSelector({ onSelect }) {
  return (
    <div style={{ textAlign: 'center', marginTop: '2rem' }}>
      <h2>Select Your Grade</h2>
      <p>Please choose your grade level to begin.</p>
      <div style={{ display: 'flex', justifyContent: 'center', gap: '1rem' }}>
        <button onClick={() => onSelect('K')} style={{ padding: '1rem 2rem', fontSize: '1rem', backgroundColor: '#34c759', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>Kindergarten</button>
        <button onClick={() => onSelect('3')} style={{ padding: '1rem 2rem', fontSize: '1rem', backgroundColor: '#5856d6', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>3rd Grade</button>
      </div>
    </div>
  );
}

function LessonCard({ subject, lesson, grade }) {
  // Use emojis as simple icons for each subject
  const iconMap = {
    Math: 'ðŸ”¢',
    Reading: 'ðŸ“–',
    Science: 'ðŸ”¬',
  };
  const icon = iconMap[subject] || 'ðŸ“š';
  // State to track the selected answer and AI feedback
  const [selectedChoice, setSelectedChoice] = useState(null);
  const [feedback, setFeedback] = useState('');
  const [submitting, setSubmitting] = useState(false);

  const handleChoice = async (choice) => {
    // Prevent multiple submissions
    if (submitting || selectedChoice) return;
    setSelectedChoice(choice);
    setSubmitting(true);
    try {
      // Prepare the request body for the AI tutor
      const body = {
        grade: grade,
        subject: subject,
        question: lesson.question,
        studentAnswer: choice,
        correctAnswer: lesson.answer,
        explanation: lesson.explanation || '',
      };
      const response = await API.post('EducationApi', '/ai', { body });
      if (response && response.response) {
        setFeedback(response.response);
      } else {
        setFeedback('Thank you for your answer!');
      }
    } catch (err) {
      console.error('AI call failed', err);
      setFeedback('Thank you for your answer!');
    } finally {
      setSubmitting(false);
    }
  };
  return (
    <div style={{ border: '1px solid #eaeaea', borderRadius: '8px', padding: '1rem', marginBottom: '1rem', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
      <h3>{icon} {subject}: {lesson.title}</h3>
      {lesson.passage && <p style={{ fontStyle: 'italic', color: '#555' }}>{lesson.passage}</p>}
      <p><strong>Question:</strong> {lesson.question}</p>
      {lesson.choices && (
        <ul style={{ listStyle: 'none', paddingLeft: 0 }}>
          {lesson.choices.map((choice) => (
            <li key={choice} style={{ padding: '0.25rem 0' }}>
              <button
                onClick={() => handleChoice(choice)}
                disabled={!!selectedChoice}
                style={{
                  padding: '0.5rem 1rem',
                  margin: '0.25rem 0',
                  backgroundColor: selectedChoice === choice ? '#0070f3' : '#e2e8f0',
                  color: selectedChoice === choice ? '#fff' : '#000',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: selectedChoice ? 'default' : 'pointer',
                  width: '100%',
                  textAlign: 'left',
                }}
              >
                {choice}
              </button>
            </li>
          ))}
        </ul>
      )}
      {/* Display AI feedback after selection */}
      {feedback && (
        <p style={{ marginTop: '0.5rem', color: '#2c5282' }}><em>{feedback}</em></p>
      )}
    </div>
  );
}

function Dashboard({ grade, onLogout }) {
  const [lessons, setLessons] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchLessons = async () => {
      setLoading(true);
      setError('');
      try {
        const res = await API.get('EducationApi', '/lessons', { queryStringParameters: { grade } });
        setLessons(res);
      } catch (err) {
        console.error('Failed to fetch lessons', err);
        setError('Unable to load lessons. Please try again later.');
      } finally {
        setLoading(false);
      }
    };
    fetchLessons();
  }, [grade]);

  return (
    <div style={{ maxWidth: '800px', margin: '2rem auto', padding: '1rem' }}>
      <header style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
        <h1 style={{ margin: 0 }}>Education Platform</h1>
        <button onClick={onLogout} style={{ background: 'transparent', border: 'none', color: '#0070f3', cursor: 'pointer' }}>Sign Out</button>
      </header>
      {loading && <p>Loading todayâ€™s lessonâ€¦</p>}
      {error && <p style={{ color: 'red' }}>{error}</p>}
      {lessons && (
        <div>
          <p><strong>Date:</strong> {lessons.date}</p>
          <p><strong>Grade:</strong> {lessons.grade}</p>
          {Object.keys(lessons.lessons || {}).map((subject) => {
            const lesson = lessons.lessons[subject];
            return (
              <LessonCard
                key={subject}
                subject={subject}
                lesson={lesson}
                grade={lessons.grade}
              />
            );
          })}
        </div>
      )}
    </div>
  );
}

export default function App() {
  /*
   * For now we disable the signâ€‘in flow entirely so the application
   * lands directly on the grade selection page.  When authentication
   * is reâ€‘enabled you can restore the login logic and set `stage`
   * accordingly.
   */
  const [stage, setStage] = useState('grade');
  const [grade, setGrade] = useState(null);

  const handleSelectGrade = (g) => {
    setGrade(g);
    setStage('dashboard');
  };

  const handleLogout = () => {
    // In a future version this should call Auth.signOut();
    setGrade(null);
    setStage('grade');
  };

  if (stage === 'grade') {
    return <GradeSelector onSelect={handleSelectGrade} />;
  }
  if (stage === 'dashboard') {
    return <Dashboard grade={grade} onLogout={handleLogout} />;
  }
  return null;
}